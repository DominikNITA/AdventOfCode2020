@page "/day11"
@inject HttpClient Http
@using System.Linq
@using System.Text.RegularExpressions

<h3>Day 11 - Seating System</h3>
<h4>Part One</h4>
<p>Result: @result</p>
<h4>Part Two</h4>
<p>Result: @p2_result</p>

@code {
    string input;
    int result;
    long p2_result;

    protected override async Task OnInitializedAsync()
    {
        input = await Http.GetStringAsync("inputs/day11.txt");
        PartOne(input);
        PartTwo(input);
    }

    enum State { Empty, Occupied, Floor }
    const char emptyChar = 'L', occupiedChar = '#', floorChar = '.';

    protected void PartOne(string input)
    {
        State[,] current;
        State[,] next;
        var rowStrings = input.Split('\n');
        current = new State[rowStrings.First().Length, rowStrings.Length];
        next = new State[rowStrings.First().Length, rowStrings.Length];
        for (int i = 0; i < current.GetLength(0); i++)
        {
            Console.WriteLine($"i{i}");
            for (int j = 0; j < current.GetLength(1); j++)
            {
                Console.WriteLine(rowStrings[j].ElementAt(i));
                next[i, j] = ParseState(rowStrings[j].ElementAt(i));
            }
        }

        do
        {
            current = (State[,])next.Clone();
            State nextState;
            for (int i = 0; i < current.GetLength(0); i++)
            {
                for (int j = 0; j < current.GetLength(1); j++)
                {
                    switch (current[i, j])
                    {
                        case State.Empty:
                            nextState = EmptyCase(i, j, current);
                            break;
                        case State.Occupied:
                            nextState = OccupiedCase(i, j, current);
                            break;
                        case State.Floor:
                            nextState = State.Floor;
                            break;
                        default:
                            nextState = State.Floor;
                            break;
                    }
                    next[i, j] = nextState;
                }
            }
            PrintState(current);
        } while (!CompareStates(current, next));
        PrintState(current);
        result = CountOccupiedSeats(current);
    }

    bool CompareStates(State[,] stateOne, State[,] stateTwo)
    {
        for (int i = 0; i < stateOne.GetLength(0); i++)
        {
            for (int j = 0; j < stateOne.GetLength(1); j++)
            {
                if (stateOne[i, j] != stateTwo[i, j]) return false;
            }
        }
        return true;
    }

    int CountOccupiedSeats(State[,] state)
    {
        int counter = 0;
        for (int i = 0; i < state.GetLength(0); i++)
        {
            for (int j = 0; j < state.GetLength(1); j++)
            {
                if (state[i, j] == State.Occupied) counter++;
            }
        }
        return counter;
    }

    void PrintState(State[,] state)
    {
        Console.WriteLine("\nCurrent state:");
        for (int j = 0; j < state.GetLength(1); j++)
        {
            string output = "";
            for (int i = 0; i < state.GetLength(0); i++)
            {
                switch (state[i, j])
                {
                    case State.Empty:
                        output += emptyChar;
                        break;
                    case State.Occupied:
                        output += occupiedChar;
                        break;
                    case State.Floor:
                        output += floorChar;
                        break;
                    default:
                        break;
                }
            }
            Console.WriteLine(output);
        }
    }

    State OccupiedCase(int i, int j, State[,] current)
    {
        int counter = 0;
        int width = current.GetLength(0);
        int height = current.GetLength(1);
        if (j > 0)
        {
            counter += current[i, j - 1] == State.Occupied ? 1 : 0;
            if (i > 0)
            {
                counter += current[i - 1, j - 1] == State.Occupied ? 1 : 0;
            }
            if (i < width - 1)
            {
                counter += current[i + 1, j - 1] == State.Occupied ? 1 : 0;
            }
        }
        if (j < height - 1)
        {
            counter += current[i, j + 1] == State.Occupied ? 1 : 0;
            if (i > 0)
            {
                counter += current[i - 1, j + 1] == State.Occupied ? 1 : 0;
            }
            if (i < width - 1)
            {
                counter += current[i + 1, j + 1] == State.Occupied ? 1 : 0;
            }
        }
        if (i > 0)
        {
            counter += current[i - 1, j] == State.Occupied ? 1 : 0;
        }
        if (i < width - 1)
        {
            counter += current[i + 1, j] == State.Occupied ? 1 : 0;
        }
        return counter >= 4 ? State.Empty : State.Occupied;
    }

    State EmptyCase(int i, int j, State[,] current)
    {
        int width = current.GetLength(0);
        int height = current.GetLength(1);
        if (j > 0)
        {
            if (current[i, j - 1] == State.Occupied) return State.Empty;
            if (i > 0)
            {
                if (current[i - 1, j - 1] == State.Occupied) return State.Empty;
            }
            if (i < width - 1)
            {
                if (current[i + 1, j - 1] == State.Occupied) return State.Empty;
            }
        }
        if (j < height - 1)
        {
            if (current[i, j + 1] == State.Occupied) return State.Empty;
            if (i > 0)
            {
                if (current[i - 1, j + 1] == State.Occupied) return State.Empty;
            }
            if (i < width - 1)
            {
                if (current[i + 1, j + 1] == State.Occupied) return State.Empty;
            }
        }
        if (i > 0)
        {
            if (current[i - 1, j] == State.Occupied) return State.Empty;
        }
        if (i < width - 1)
        {
            if (current[i + 1, j] == State.Occupied) return State.Empty;

        }
        return State.Occupied;
    }

    State ParseState(char c)
    {
        switch (c)
        {
            case emptyChar:
                return State.Empty;
            case occupiedChar:
                return State.Occupied;
            case floorChar:
                return State.Floor;
            default:
                throw new ArgumentOutOfRangeException(c.ToString());
        }
    }


    protected void PartTwo(string input)
    {
        //var numbers = ParseNumbers(input);

        //p2_result = GetResultFromContiguousSet(numbers, 14144619);
    }
}
