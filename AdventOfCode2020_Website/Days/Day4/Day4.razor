@page "/day4"
@inject HttpClient Http
@using System.Text.RegularExpressions

<h3>Day 4 - Passport Processing</h3>
<h4>Part One</h4>
<p>Result: @result</p>
<h4>Part Two</h4>
<p>Done with regex matching. Reference document used: <a href="https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf">link from MSDN</a></p>
<p>Result: @p2_result</p>




@code {
    string input;
    int result;
    int p2_result;

    protected override async Task OnInitializedAsync()
    {
        input = await Http.GetStringAsync("inputs/day4.txt");
        PartOne(input);
        PartTwo(input);
    }

    protected void PartOne(string input)
    {
        var passports = input.Split("\n\n");

        result = CheckPasswords_PartOne(passports);
    }

    protected void PartTwo(string input)
    {
        var passports = input.Split("\n\n");

        p2_result = CheckPasswords_PartTwo(passports);
    }

    int CheckPasswords_PartOne(string[] passports)
    {
        int validPassportCount = 0;
        string[] requiredFields = new string[] { "byr", "iyr", "eyr", "hgt", "hcl", "ecl", "pid" };

        foreach (var passport in passports)
        {
            var tags = passport.Split(' ', '\n').Select(x => x.Split(':')[0]);
            foreach (var requiredField in requiredFields)
            {
                if (!tags.Contains(requiredField))
                {
                    validPassportCount--;
                    break;
                }
            }
            validPassportCount++;
        }

        return validPassportCount;
    }

    int CheckPasswords_PartTwo(string[] passports)
    {
        int validPassportCount = 0;
        var fieldsValidationDict = new Dictionary<string,string> {
            { "byr", @"^(19[2-9][0-9]|200[0-2])$"},
            { "iyr", @"^(201[0-9]|2020)$"},
            { "eyr", @"^(202[0-9]|2030)$"},
            { "hgt", @"^(((1[5-8][0-9]|19[0-3])cm)|((59|6[0-9]|7[0-6])in))$"},
            { "hcl", @"^#[0-9a-f]{6}$"},
            { "ecl", @"^amb|blu|brn|gry|grn|hzl|oth$"},
            { "pid", @"^[0-9]{9}$"}
        };

        foreach (var passport in passports)
        {
            var tagsWithValues = passport.Split(' ', '\n').Select(x => { var temp = x.Split(':'); return (temp[0], temp[1]); });
            if (fieldsValidationDict.All(field => tagsWithValues.Any(tv => tv.Item1 == field.Key && Regex.IsMatch(tv.Item2,field.Value))))
            {
                validPassportCount++;
            }
        }

        return validPassportCount;
    }
}
