@page "/day7"
@inject HttpClient Http
@using System.Text.RegularExpressions

<h3>Day 7 - Handy Haversacks</h3>
<h4>Part One</h4>
<p>Result: @result</p>
<h4>Part Two</h4>
<p>Result: @p2_result</p>

@code {
    string input;
    int result;
    int p2_result;

    protected override async Task OnInitializedAsync()
    {
        input = await Http.GetStringAsync("inputs/day7.txt");
        PartOne(input);
        PartTwo(input);
    }

    protected void PartOne(string input)
    {
        var ruleStrings = input.Split('\n');
        List<string> checkedBags = new List<string>();
        List<Rule> rules = new List<Rule>();
        foreach (var ruleString in ruleStrings)
        {
            var parts = ruleString.Split(" bags contain ");
            var containedRules = new Dictionary<string, int>();
            if(!parts[1].Contains("no other bags."))
            {
                var containedRulesStrings = parts[1];
                containedRulesStrings = containedRulesStrings.Remove(containedRulesStrings.Length - 1);
                var containedRulesArray = containedRulesStrings.Split(',').Select(x => x.Trim());
                foreach (var rule in containedRulesArray)
                {
                    int spaceIndex = rule.IndexOf(' ');
                    containedRules.Add(rule.Substring(spaceIndex + 1).Replace(" bags",), int.Parse(rule.Substring(0,spaceIndex)));
                }
            }
            rules.Add(new Rule() { Name = parts[0], ContainedRules=containedRules });
        }
        result = GetResult(new List<string>() { "shiny gold" }, rules, new List<string>());
    }

    int GetResult(List<string> bagsToCheck,List<Rule> rules,List<string> checkedBags)
    {
        List<string> nextBags = new List<string>();
        Console.WriteLine("Bags to check: " + String.Join(',',bagsToCheck));
        Console.WriteLine("Checked bags: " + String.Join(',', checkedBags));
        Console.WriteLine("Rules: " + String.Join(',', rules.Select(rule => rule.Name).ToArray()));
        foreach (var rule in rules)
        {
            Console.WriteLine(String.Join(',',rule.ContainedRules.Keys));
            if(!checkedBags.Contains(rule.Name) && rule.ContainedRules.Keys.Any(key => bagsToCheck.Contains(key)))
            {
                nextBags.Add(rule.Name);
                checkedBags.Add(rule.Name);
            }
        }
        if(nextBags.Count == 0)
        {
            return checkedBags.Count;
        }
        else
        {
            return GetResult(nextBags, rules, checkedBags);
        }
    }

    private class Rule
    {
        public string Name { get; set; }
        public Dictionary<string,int> ContainedRules { get; set; }
    }

    protected void PartTwo(string input)
    {

    }
}
