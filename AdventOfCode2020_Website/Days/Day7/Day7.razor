@page "/day7"
@inject HttpClient Http
@using System.Text.RegularExpressions

<h3>Day 7 - Handy Haversacks</h3>
<h4>Part One</h4>
<p>Result: @result</p>
<h4>Part Two</h4>
<p>Result: @p2_result</p>

@code {
    string input;
    int result;
    int p2_result;

    protected override async Task OnInitializedAsync()
    {
        input = await Http.GetStringAsync("inputs/day7.txt");
        PartOne(input);
        PartTwo(input);
    }

    protected void PartOne(string input)
    {
        var rules = GetRulesFromStrings(input.Split('\n'));

        result = GetAmountBagsContainingGivenBag(new List<string>() { "shiny gold" }, rules);
    }

    List<Rule> GetRulesFromStrings(string[] ruleStrings)
    {
        List<Rule> rules = new List<Rule>();
        Regex containedRuleRegex = new Regex(@"^[ ]?(?<quantity>[0-9]) (?<name>[\w]+ [\w]+) bag[s]?$");
        foreach (var ruleString in ruleStrings)
        {
            var parts = ruleString.Split(" bags contain ");
            var containedRules = new Dictionary<string, int>();
            var containedRulesStrings = parts[1];
            //Note: Strange behavior of Remove method: -1 should remove the last character but only -2 is working :(
            containedRulesStrings = containedRulesStrings.Remove(containedRulesStrings.Length - 2);
            var containedRulesArray = containedRulesStrings.Split(',');
            foreach (var rule in containedRulesArray)
            {
                var match = containedRuleRegex.Match(rule);
                if (match.Success)
                {
                    containedRules.Add(match.Groups["name"].Value, int.Parse(match.Groups["quantity"].Value));
                }
            }
            if(containedRules.Count > 0)
            {
                rules.Add(new Rule() { Name = parts[0], ContainedRules = containedRules });
            }
        }
        return rules;
    }

    int GetAmountBagsContainingGivenBag(List<string> bagsToLookFor, List<Rule> rules, List<string> checkedBags = null)
    {
        checkedBags ??= new List<string>();
        List<string> nextBags = new List<string>();

        foreach (var rule in rules)
        {
            if (!checkedBags.Contains(rule.Name) //If rule has not been checked before
                && rule.ContainedRules.Keys.Any(key => bagsToLookFor.Contains(key)))
            {
                nextBags.Add(rule.Name);
                checkedBags.Add(rule.Name);
            }
        }

        return nextBags.Count == 0 ? checkedBags.Count : GetAmountBagsContainingGivenBag(nextBags, rules, checkedBags);
    }

    private class Rule
    {
        public string Name { get; set; }
        public Dictionary<string, int> ContainedRules { get; set; }
    }

    protected void PartTwo(string input)
    {
        var rules = GetRulesFromStrings(input.Split('\n'));

        p2_result = GetAmountOfBagsContainedInsideGivenBag(rules, "shiny gold");
    }

    int GetAmountOfBagsContainedInsideGivenBag(List<Rule> rules, string bagName)
    {
        Rule bagRule;
        bagRule = rules.FirstOrDefault(rule => rule.Name == bagName);
        if(bagRule == null)
        {
            return 0;
        }
        else
        {
            return bagRule.ContainedRules.Aggregate(0, (sum, next) => sum + next.Value + next.Value * GetAmountOfBagsContainedInsideGivenBag(rules, next.Key));
        }
    }
}
